#!/bin/bash
# Simple wrapper for Claude Flutter Agent that works without Python dependencies

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# Default values
DEFAULT_PROJECT_PATH="/home/wojtek/dev/carenji"
DEFAULT_TMUX_SESSION="claude-carenji"

# Function to show help
show_help() {
    cat << EOF
Claude Flutter Agent - Simple Launcher

Usage: claude-flutter-agent [COMMAND] [OPTIONS]

Commands:
  run         Start the agent with a prompt
  attach      Attach to running tmux session  
  stop        Stop the agent
  status      Show agent status
  help        Show this help message

Options for 'run':
  -p, --prompt TEXT      The prompt text to send to Claude
  -f, --file FILE       Read prompt from file
  --project PATH        Project path (default: $DEFAULT_PROJECT_PATH)
  --session NAME        Tmux session name (default: $DEFAULT_TMUX_SESSION)

Examples:
  claude-flutter-agent run -p "Fix the medication reminder feature"
  claude-flutter-agent run -f prompts/implement_feature.txt
  claude-flutter-agent attach
  claude-flutter-agent stop

EOF
}

# Function to run the agent
run_agent() {
    local prompt=""
    local project_path="$DEFAULT_PROJECT_PATH"
    local session_name="$DEFAULT_TMUX_SESSION"
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -p|--prompt)
                prompt="$2"
                shift 2
                ;;
            -f|--file)
                if [[ -f "$2" ]]; then
                    prompt=$(cat "$2")
                else
                    echo "Error: Prompt file '$2' not found"
                    exit 1
                fi
                shift 2
                ;;
            --project)
                project_path="$2"
                shift 2
                ;;
            --session)
                session_name="$2"
                shift 2
                ;;
            *)
                echo "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Check if prompt is provided
    if [[ -z "$prompt" ]]; then
        echo "Error: No prompt provided. Use -p or -f option."
        echo ""
        show_help
        exit 1
    fi
    
    # Kill existing session if it exists
    tmux kill-session -t "$session_name" 2>/dev/null || true
    
    # Create new tmux session
    echo "Creating tmux session: $session_name"
    tmux new-session -d -s "$session_name" -n agent
    
    # Change to project directory
    tmux send-keys -t "$session_name:agent" "cd $project_path" Enter
    
    # Start Claude (with auto-resume if available)
    if command -v claude-auto-resume &> /dev/null; then
        echo "Starting Claude with auto-resume..."
        tmux send-keys -t "$session_name:agent" "claude-auto-resume --dangerously-skip-permissions" Enter
    else
        echo "Starting Claude..."
        tmux send-keys -t "$session_name:agent" "claude --dangerously-skip-permissions" Enter
    fi
    
    # Wait for Claude to be ready
    echo "Waiting for Claude to initialize..."
    sleep 10
    
    # Send the prompt
    echo "Sending prompt: ${prompt:0:100}..."
    # Escape single quotes in prompt
    escaped_prompt="${prompt//\'/\'\"\'\"\'}"
    tmux send-keys -t "$session_name:agent" "$escaped_prompt" Enter
    
    echo ""
    echo "✓ Agent started successfully!"
    echo ""
    echo "To view the agent, run:"
    echo "  claude-flutter-agent attach"
    echo ""
    echo "To stop the agent, run:"
    echo "  claude-flutter-agent stop"
}

# Function to attach to session
attach_session() {
    local session_name="${1:-$DEFAULT_TMUX_SESSION}"
    
    if tmux has-session -t "$session_name" 2>/dev/null; then
        tmux attach-session -t "$session_name"
    else
        echo "Error: No agent session found. Start one with:"
        echo "  claude-flutter-agent run -p \"Your prompt here\""
        exit 1
    fi
}

# Function to stop agent
stop_agent() {
    local session_name="${1:-$DEFAULT_TMUX_SESSION}"
    
    if tmux has-session -t "$session_name" 2>/dev/null; then
        tmux kill-session -t "$session_name"
        echo "✓ Agent stopped"
    else
        echo "No agent session found"
    fi
}

# Function to show status
show_status() {
    local session_name="${1:-$DEFAULT_TMUX_SESSION}"
    
    if tmux has-session -t "$session_name" 2>/dev/null; then
        echo "✓ Agent is running in tmux session: $session_name"
        echo ""
        echo "Recent output:"
        echo "----------------------------------------"
        tmux capture-pane -t "$session_name:agent" -p | tail -20
        echo "----------------------------------------"
    else
        echo "✗ Agent is not running"
    fi
}

# Main command handling
case "${1:-help}" in
    run)
        shift
        run_agent "$@"
        ;;
    attach)
        shift
        attach_session "$@"
        ;;
    stop)
        shift
        stop_agent "$@"
        ;;
    status)
        shift
        show_status "$@"
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        # If first argument doesn't match commands, assume it's a prompt for quick run
        if [[ -n "$1" ]]; then
            run_agent -p "$*"
        else
            show_help
        fi
        ;;
esac