[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "claude-flutter-firebase-agent"
version = "1.0.0"
description = "Specialized Claude agent for Flutter app development with Firebase backend - includes emulators, MCP docs, and automatic usage limit handling"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "Jeffrey Emanuel", email = "jeffrey.emanuel@gmail.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Monitoring",
    "Topic :: Utilities",
    "Topic :: Software Development :: Build Tools",
    "Framework :: Flutter",
    "Topic :: Database :: Front-Ends",
    "Typing :: Typed",
]

# Core dependencies
dependencies = [
    "typer>=0.15.0",
    "rich>=13.7.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.12.0",
    "mypy>=1.7.0",
    "pre-commit>=3.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

# All optional dependencies
all = [
    "claude-code-agent-farm[dev,docs]",
]

[project.scripts]
claude-flutter-agent = "claude_code_agent_farm.flutter_agent_cli:app"

[project.urls]
Homepage = "https://github.com/Dicklesworthstone/claude-flutter-firebase-agent"
Repository = "https://github.com/Dicklesworthstone/claude-flutter-firebase-agent"
Issues = "https://github.com/Dicklesworthstone/claude-flutter-firebase-agent/issues"
Documentation = "https://github.com/Dicklesworthstone/claude-flutter-firebase-agent#readme"

# Configure Hatchling
[tool.hatch.build.targets.wheel]
packages = ["src/claude_code_agent_farm"]

[tool.hatch.build.targets.sdist]
include = [
    "src/",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]
exclude = [
    "/.venv",
    "/.vscode",
    "/.git",
    "/.github",
    "/__pycache__",
    "/*.pyc",
    "/*.pyo",
    "/*.pyd",
    ".env",
    ".envrc",
    "tests/",
    "docs/",
    "*.log",
    ".DS_Store",
    ".direnv/",
    "*.swp",
    "*.swo",
    "*~",
    "claude_code_agent_farm.py",  # Exclude old monolithic file
]

# --- Tool Configurations ---

[tool.ruff]
line-length = 120
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "C4",    # flake8-comprehensions
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "RUF",   # Ruff-specific rules
    "ASYNC", # flake8-async
    "FA",    # flake8-future-annotations
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "A003",  # Class attribute shadowing builtin
    "SIM108", # Use ternary operator (sometimes less readable)
    "W293", # Blank line contains whitespace
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true

[tool.ruff.lint.isort]
known-first-party = ["claude_code_agent_farm"]
combine-as-imports = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
strict_optional = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--cov=claude_code_agent_farm",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["claude_code_agent_farm"]
omit = ["tests/*", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

# --- uv specific configuration ---
[tool.uv]
package = true