name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build Python package
        run: python -m build
      
      - name: Create changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "## What's Changed" > changelog.md
          echo "" >> changelog.md
          
          # Get commits since last tag
          if git describe --tags --abbrev=0 HEAD^ 2>/dev/null; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
            git log --pretty=format:"* %s (%h)" $LAST_TAG..HEAD >> changelog.md
          else
            git log --pretty=format:"* %s (%h)" >> changelog.md
          fi
          
          echo "" >> changelog.md
          echo "## Carenji Integration" >> changelog.md
          echo "" >> changelog.md
          echo "This release includes full support for Carenji healthcare app development with:" >> changelog.md
          echo "* Flutter and Firebase integration" >> changelog.md
          echo "* Automated testing for healthcare features" >> changelog.md
          echo "* Docker container with all necessary tools" >> changelog.md
          echo "* Tmux session management for continuous operation" >> changelog.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: changelog.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          if [ -n "$TWINE_PASSWORD" ]; then
            twine upload dist/*
          else
            echo "PyPI token not set, skipping upload"
          fi

  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME != '' && format('{0}/claude-flutter-firebase-agent', secrets.DOCKERHUB_USERNAME) || '' }}
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
      
      - name: Update version in docs
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Update version in README
          sed -i "s/claude-flutter-firebase-agent==.*/claude-flutter-firebase-agent==$VERSION/g" README.md
          
          # Update Docker image tags
          sed -i "s|ghcr.io/.*/claude-flutter-firebase-agent:.*|ghcr.io/${{ github.repository }}:$VERSION|g" README.md
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "docs: update version to ${{ github.ref_name }}"
          title: "Update documentation for ${{ github.ref_name }}"
          body: |
            This PR updates the documentation for the new release ${{ github.ref_name }}.
            
            Changes:
            - Updated package version in installation instructions
            - Updated Docker image tags
            
            Auto-generated by release workflow.
          branch: update-docs-${{ github.ref_name }}
          delete-branch: true

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [ "${{ needs.create-release.result }}" == "success" ] && [ "${{ needs.docker-release.result }}" == "success" ]; then
            echo "✅ Release ${{ github.ref_name }} completed successfully!"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Release ${{ github.ref_name }} completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Artifacts Published:" >> $GITHUB_STEP_SUMMARY
            echo "- Python package on PyPI" >> $GITHUB_STEP_SUMMARY
            echo "- Docker images on GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
            echo "- GitHub Release with changelog" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Release ${{ github.ref_name }} failed!"
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Release ${{ github.ref_name }} failed!**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi