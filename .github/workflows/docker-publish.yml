name: Docker Build and Publish

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  scan-image:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
      security-events: write
      
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  test-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Test Docker image
        run: |
          # Pull the image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Test basic functionality
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest claude-flutter-agent --version
          
          # Test with environment variables
          docker run --rm \
            -e CLAUDE_PROJECT_PATH=/tmp/test \
            -e CLAUDE_PROMPT_TEXT="Test prompt" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            claude-flutter-agent --help
          
          # Test Flutter installation
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest flutter --version
          
          # Test Firebase CLI
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest firebase --version
          
          # Test tmux
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest tmux -V